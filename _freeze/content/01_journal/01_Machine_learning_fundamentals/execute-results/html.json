{
  "hash": "735e4f1e6b12bc3ee3dbe3474ed19dbb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01 Machine Learning Fundamentals\"\nauthor: \"Rishon Noel Saldanha\"\ndate: \"2024/06/18\"\nparams:\n  data_dir: \"../../data/\"\nformat: \n  html:\n    df_print: paged\n---\n\n\n\n\n\nLoad the absolute path to the data directory.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dir <- params$data_dir\n```\n:::\n\n\n\n\n\n\n# Libraries\nLoad the following libraries. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required package: PerformanceAnalytics\n#> Loading required package: xts\n#> Loading required package: zoo\n#> \n#> Attaching package: 'zoo'\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attaching package: 'xts'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attaching package: 'PerformanceAnalytics'\n#> \n#> The following object is masked from 'package:graphics':\n#> \n#>     legend\n#> \n#> Loading required package: quantmod\n#> Loading required package: TTR\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(umap)\n```\n:::\n\n\n\n\n\n\n# Data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# STOCK PRICES\nsp_500_prices_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/sp_500_prices_tbl.rds\")\nprint(sp_500_prices_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 1,225,765 × 8\n#>    symbol date        open  high   low close   volume adjusted\n#>    <chr>  <date>     <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n#>  1 MSFT   2009-01-02  19.5  20.4  19.4  20.3 50084000     15.9\n#>  2 MSFT   2009-01-05  20.2  20.7  20.1  20.5 61475200     16.0\n#>  3 MSFT   2009-01-06  20.8  21    20.6  20.8 58083400     16.2\n#>  4 MSFT   2009-01-07  20.2  20.3  19.5  19.5 72709900     15.2\n#>  5 MSFT   2009-01-08  19.6  20.2  19.5  20.1 70255400     15.7\n#>  6 MSFT   2009-01-09  20.2  20.3  19.4  19.5 49815300     15.2\n#>  7 MSFT   2009-01-12  19.7  19.8  19.3  19.5 52163500     15.2\n#>  8 MSFT   2009-01-13  19.5  20.0  19.5  19.8 65843500     15.5\n#>  9 MSFT   2009-01-14  19.5  19.7  19.0  19.1 80257500     14.9\n#> 10 MSFT   2009-01-15  19.1  19.3  18.5  19.2 96169800     15.0\n#> # ℹ 1,225,755 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# SECTOR INFORMATION\nsp_500_index_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/sp_500_index_tbl.rds\")\nsp_500_index_tbl |> as_tibble() |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 506 × 5\n#>    symbol company                         weight sector              shares_held\n#>    <chr>  <chr>                            <dbl> <chr>                     <dbl>\n#>  1 MSFT   Microsoft Corporation           0.0359 Information Techno…    84853600\n#>  2 AAPL   Apple Inc.                      0.0330 Information Techno…    49533308\n#>  3 AMZN   Amazon.com Inc.                 0.0283 Consumer Discretio…     4510051\n#>  4 BRK.B  Berkshire Hathaway Inc. Class B 0.0171 Financials             21364490\n#>  5 FB     Facebook Inc. Class A           0.0168 Communication Serv…    26385216\n#>  6 JNJ    Johnson & Johnson               0.0157 Health Care            29452358\n#>  7 JPM    JPMorgan Chase & Co.            0.0151 Financials             36529800\n#>  8 GOOG   Alphabet Inc. Class C           0.0147 Communication Serv…     3378423\n#>  9 GOOGL  Alphabet Inc. Class A           0.0144 Communication Serv…     3282939\n#> 10 XOM    Exxon Mobil Corporation         0.0141 Energy                 46493644\n#> # ℹ 496 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Stock Prices Standardization\nStock prices (adjusted stock price) are standardized by converting them into daily returns (percent change from previous day). This is done such that the stock prices are of the same magnitude and can thus be compared. Below is the sp 500 price table shown:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_500_prices_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>%\n  select(symbol, date, adjusted) %>%\n  filter(date >= as.Date(\"2018-01-01\")) %>%\n  group_by(symbol) %>%\n  mutate(adjusted_lag = lag(adjusted)) %>%\n  filter(!is.na(adjusted_lag)) %>%\n  mutate(difference = adjusted - adjusted_lag) %>%\n  mutate(pct_return = difference / adjusted_lag) %>%\n  select(symbol, date, pct_return) %>%\n  ungroup()\nprint(sp_500_daily_returns_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 141,340 × 3\n#>    symbol date       pct_return\n#>    <chr>  <date>          <dbl>\n#>  1 MSFT   2018-01-03   0.00465 \n#>  2 MSFT   2018-01-04   0.00880 \n#>  3 MSFT   2018-01-05   0.0124  \n#>  4 MSFT   2018-01-08   0.00102 \n#>  5 MSFT   2018-01-09  -0.000680\n#>  6 MSFT   2018-01-10  -0.00453 \n#>  7 MSFT   2018-01-11   0.00296 \n#>  8 MSFT   2018-01-12   0.0173  \n#>  9 MSFT   2018-01-16  -0.0140  \n#> 10 MSFT   2018-01-17   0.0203  \n#> # ℹ 141,330 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Conversion to User-Item Format\nThe next step involves converting to a user-item format with the `symbol` in the first column and every other column the value of the _daily returns_ (`pct_return`) for every stock at each `date`. The user in this case is the `symbol` (company), and the item in this case is the `pct_return` at each `date`.\n\nImporting the correct results first (just in case I was not able to complete the last step).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_500_daily_returns_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/sp_500_daily_returns_tbl.rds\")\nprint(sp_500_daily_returns_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 141,340 × 3\n#>    symbol date       pct_return\n#>    <chr>  <date>          <dbl>\n#>  1 MSFT   2018-01-03   0.00465 \n#>  2 MSFT   2018-01-04   0.00880 \n#>  3 MSFT   2018-01-05   0.0124  \n#>  4 MSFT   2018-01-08   0.00102 \n#>  5 MSFT   2018-01-09  -0.000680\n#>  6 MSFT   2018-01-10  -0.00453 \n#>  7 MSFT   2018-01-11   0.00296 \n#>  8 MSFT   2018-01-12   0.0173  \n#>  9 MSFT   2018-01-16  -0.0140  \n#> 10 MSFT   2018-01-17   0.0203  \n#> # ℹ 141,330 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd the conversion follows with:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  spread(key = date, value = pct_return, fill = 0)\nstock_date_matrix_tbl |> as_tibble() |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 502 × 283\n#>    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#>    <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n#>  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#>  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#>  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#>  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#>  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#>  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#>  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#>  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#>  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#> 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#> # ℹ 492 more rows\n#> # ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#> #   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#> #   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#> #   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#> #   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#> #   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## K-Means Clustering\n\nImporting the correct results first (just in case I was not able to complete the last step).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstock_date_matrix_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl |> as_tibble() |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 502 × 283\n#>    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#>    <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n#>  1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n#>  2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n#>  3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n#>  4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n#>  5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n#>  6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n#>  7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n#>  8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n#>  9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n#> 10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n#> # ℹ 492 more rows\n#> # ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#> #   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#> #   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#> #   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#> #   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#> #   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd then executing the KMeans operation:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create kmeans_obj for 4 centers\nNUM_CENTERS <- 4\nN_START = 20\n\nkmeans_obj <- stock_date_matrix_tbl %>%\n    select(-symbol) %>%\n    kmeans(centers = NUM_CENTERS, nstart = N_START)\nprint(kmeans_obj$cluster)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   [1] 1 2 1 2 1 1 2 1 1 2 2 1 1 1 2 3 3 3 1 1 1 3 1 1 2 1 2 1 1 1 2 2 2 1 1 1 1\n#>  [38] 3 2 2 2 1 1 1 4 4 1 1 1 3 1 3 2 3 2 1 3 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1\n#>  [75] 1 1 1 3 1 3 1 1 1 1 1 1 3 2 1 1 1 1 1 3 1 1 1 1 3 3 1 1 1 1 1 3 1 3 1 1 1\n#> [112] 4 1 1 3 1 1 2 2 1 1 1 1 1 1 4 4 3 1 1 1 1 1 1 1 1 1 1 1 3 1 1 3 1 3 3 1 4\n#> [149] 1 1 2 1 1 3 1 3 1 1 1 4 3 3 3 3 1 1 3 3 2 3 1 1 3 1 4 1 2 1 4 1 3 2 1 1 1\n#> [186] 1 1 4 1 1 1 1 1 1 3 4 2 1 1 1 1 3 1 1 2 2 1 2 1 1 1 1 1 4 1 1 1 1 3 1 4 4\n#> [223] 1 1 1 1 1 1 4 2 1 1 3 1 1 1 3 1 1 1 2 1 2 2 1 2 2 1 1 2 1 1 3 2 1 1 1 1 1\n#> [260] 1 1 1 1 1 1 1 3 1 2 3 3 2 3 4 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 2 1 3 1\n#> [297] 1 2 3 3 1 1 2 3 2 1 1 3 1 1 2 1 3 1 1 1 1 3 1 4 1 4 1 2 2 1 1 1 2 2 1 4 1\n#> [334] 1 3 1 2 3 1 2 1 1 4 3 1 2 1 1 2 1 1 1 3 4 1 1 1 4 1 1 1 3 3 1 1 3 1 1 1 1\n#> [371] 1 3 3 1 1 3 1 3 1 1 3 4 1 1 4 2 1 2 1 1 3 1 1 2 1 1 1 1 1 1 1 1 1 1 3 1 1\n#> [408] 1 1 1 3 4 3 1 2 3 3 1 3 1 1 2 1 1 2 1 1 2 3 1 3 1 1 1 1 1 1 1 1 1 2 1 1 1\n#> [445] 3 2 2 2 2 1 2 2 1 3 1 1 1 1 1 1 2 1 1 2 1 1 1 4 1 3 1 2 2 3 3 1 1 1 2 3 3\n#> [482] 1 1 1 3 4 1 1 1 3 2 4 3 2 4 1 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd using `glance()` to get the `tot.withinss`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_obj %>% glance() %>% print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 1 × 4\n#>   totss tot.withinss betweenss  iter\n#>   <dbl>        <dbl>     <dbl> <int>\n#> 1  33.6         29.2      4.40     4\n```\n\n\n:::\n:::\n\n\n\n\n\n## Finding Optimal K\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use purrr to map\nkmeans_mapped_tbl <- tibble(centers = 1:30) %>%\n    mutate(k_means = centers %>% map(kmeans_mapper)) %>%\n    mutate(glance  = k_means %>% map(glance))\nprint(kmeans_mapped_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 30 × 3\n#>    centers k_means  glance          \n#>      <int> <list>   <list>          \n#>  1       1 <kmeans> <tibble [1 × 4]>\n#>  2       2 <kmeans> <tibble [1 × 4]>\n#>  3       3 <kmeans> <tibble [1 × 4]>\n#>  4       4 <kmeans> <tibble [1 × 4]>\n#>  5       5 <kmeans> <tibble [1 × 4]>\n#>  6       6 <kmeans> <tibble [1 × 4]>\n#>  7       7 <kmeans> <tibble [1 × 4]>\n#>  8       8 <kmeans> <tibble [1 × 4]>\n#>  9       9 <kmeans> <tibble [1 × 4]>\n#> 10      10 <kmeans> <tibble [1 × 4]>\n#> # ℹ 20 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize Scree Plot\nkmeans_mapped_tbl %>%\n    unnest(glance) %>%\n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](01_Machine_learning_fundamentals_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## UMAP Application\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk_means_mapped_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\nprint(k_means_mapped_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 30 × 3\n#>    centers k_means  glance          \n#>      <int> <list>   <list>          \n#>  1       1 <kmeans> <tibble [1 × 4]>\n#>  2       2 <kmeans> <tibble [1 × 4]>\n#>  3       3 <kmeans> <tibble [1 × 4]>\n#>  4       4 <kmeans> <tibble [1 × 4]>\n#>  5       5 <kmeans> <tibble [1 × 4]>\n#>  6       6 <kmeans> <tibble [1 × 4]>\n#>  7       7 <kmeans> <tibble [1 × 4]>\n#>  8       8 <kmeans> <tibble [1 × 4]>\n#>  9       9 <kmeans> <tibble [1 × 4]>\n#> 10      10 <kmeans> <tibble [1 × 4]>\n#> # ℹ 20 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply UMAP\numap_results <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  umap()\numap_results\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> umap embedding of 502 items in 2 dimensions\n#> object components: layout, data, knn, config\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n    as_tibble() %>%\n    bind_cols(\n      stock_date_matrix_tbl %>% select(symbol)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(umap_results_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 502 × 3\n#>         V1      V2 symbol\n#>      <dbl>   <dbl> <chr> \n#>  1 -1.56    0.148  A     \n#>  2 -0.351   2.50   AAL   \n#>  3 -0.0288 -1.18   AAP   \n#>  4 -2.97   -0.641  AAPL  \n#>  5  0.109   0.227  ABBV  \n#>  6  0.550  -0.406  ABC   \n#>  7 -2.92   -0.836  ABMD  \n#>  8 -1.23   -0.0930 ABT   \n#>  9 -1.66   -0.527  ACN   \n#> 10 -2.98   -1.08   ADBE  \n#> # ℹ 492 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize UMAP results\numap_results_tbl %>%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n```\n\n::: {.cell-output-display}\n![](01_Machine_learning_fundamentals_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Combination of K-Means and UMAP\nNow the K-Means clusters and the UMAP 2D representation are being combined\n\nImporting the correct results first (just in case I was not able to complete the last step).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk_means_mapped_tbl <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"C:/Users/risho/OneDrive/Desktop/internship_sparks/ss24-bdml-rishon1234/ML/data/Business Decisions with Machine Learning/umap_results_tbl.rds\")\nprint(umap_results_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 502 × 3\n#>         V1      V2 symbol\n#>      <dbl>   <dbl> <chr> \n#>  1 -0.764   1.65   A     \n#>  2 -2.70    0.455  AAL   \n#>  3  0.739  -0.0320 AAP   \n#>  4  0.0130  3.09   AAPL  \n#>  5 -0.965  -0.0193 ABBV  \n#>  6 -0.506  -0.659  ABC   \n#>  7  0.436   3.10   ABMD  \n#>  8 -0.262   1.35   ABT   \n#>  9  0.0598  1.63   ACN   \n#> 10  0.570   3.43   ADBE  \n#> # ℹ 492 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNow, the first 10 KMeans items are to be selected as the ScreePlot flattens beyond this one.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n  pull(k_means) %>%\n  pluck(10)\n```\n:::\n\n\n\n\n\nNext, the clusters from the `k_means_obj` with the `umap_results_tbl` are being combined.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\numap_kmeans_results_tbl <- k_means_obj %>%\n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster) %>%\n  left_join(umap_results_tbl, by = \"symbol\") %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\nprint(umap_kmeans_results_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 502 × 6\n#>    symbol .cluster      V1      V2 company                       sector         \n#>    <chr>  <fct>      <dbl>   <dbl> <chr>                         <chr>          \n#>  1 A      7        -0.764   1.65   Agilent Technologies Inc.     Health Care    \n#>  2 AAL    2        -2.70    0.455  American Airlines Group Inc.  Industrials    \n#>  3 AAP    10        0.739  -0.0320 Advance Auto Parts Inc.       Consumer Discr…\n#>  4 AAPL   9         0.0130  3.09   Apple Inc.                    Information Te…\n#>  5 ABBV   7        -0.965  -0.0193 AbbVie Inc.                   Health Care    \n#>  6 ABC    5        -0.506  -0.659  AmerisourceBergen Corporation Health Care    \n#>  7 ABMD   9         0.436   3.10   ABIOMED Inc.                  Health Care    \n#>  8 ABT    7        -0.262   1.35   Abbott Laboratories           Health Care    \n#>  9 ACN    7         0.0598  1.63   Accenture Plc Class A         Information Te…\n#> 10 ADBE   9         0.570   3.43   Adobe Inc.                    Information Te…\n#> # ℹ 492 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd finally plotting the K-Means and UMAP results.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize the combined K-Means and UMAP results\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required package: viridisLite\n```\n\n\n:::\n\n```{.r .cell-code}\numap_kmeans_results_tbl %>%\n  ggplot(aes(x = V1, y = V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = viridis_pal()(10))\n```\n\n::: {.cell-output-display}\n![](01_Machine_learning_fundamentals_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}